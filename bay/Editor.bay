<!--
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="Runtime.Widget.TextEditable">

<use name="Runtime.Reference" />
<use name="Runtime.Web.Messages.ValueChangeMessage" />


<style>
.widget_text_editable{
	width: 100%;
	max-width: 100%;
	font-family: monospace;
	font-size: var(--widget-font-size);
	padding: var(--widget-button-padding-y) var(--widget-button-padding-x); margin: 0;
	background-color: var(--widget-color-default);
	border-width: var(--widget-border-width);
	border-color: var(--widget-color-border);
	border-style: solid;
	border-radius: 4px;
	box-shadow: none;
	overflow: auto;
	outline: transparent;
	line-height: 1.5;
	tab-size: 4;
	white-space: pre;
}
.widget_text_editable.wrap{
	overflow-wrap: break-word;
	text-wrap: wrap;
}
.widget_text_editable.overflow{
	overflow: auto;
	text-wrap: nowrap;
}
</style>


<template>
	%set Map props = this.getProps();
	<div class="widget_text_editable"
		class={{ this.class }}
		name={{ this.name }}
		contenteditable="plaintext-only"
		@event:selectstart={{ this.onSelectStart }}
		@event:keydown={{ this.onKeyDown }}
		@event:input={{ this.onInput }}
		@ref="text"
		...props
	></div>
</template>


<script>

props Reference reference = null;
props bool readonly = false;
props int timeout = 500;
props string name = "";
props string value = "";
var change_timer = null;
var old_value = null;
Collection<string> lines = [];
Dict selected = null;


/**
 * Returns value
 */
string getValue() => this.getRef("text").innerText;


/**
 * Set value
 */
void setValue(string value)
{
	var text = this.getRef("text");
	text.innerHTML = "";
	
	/* Add lines */
	this.lines = rs::split("\n", value);
	for (int i=0; i<this.lines.count(); i++)
	{
		var div = document.createElement("div");
		div.classList.add("line");
		div.innerText = this.lines.get(i);
		div.line = i;
		text.append(div);
	}
}


/**
 * Set line content
 */
void setLineContent(int y, string content)
{
	this.lines.set(y, content);
	var element = this.getLineElement(y);
	element.innerText = y;
}


/**
 * Returns selection
 */
var getSelection() => this.getRef("text").ownerDocument.defaultView.getSelection();


/**
 * Returns cursor position
 */
var getCursorPos()
{
	var selection = this.getSelection();
	var range = selection.getRangeAt(0);
	var start = this.findLine(range.startContainer);
	var end = this.findLine(range.endContainer);
	int x = range.endOffset;
	int y = end;
	return {
		"range": range,
		"selection": selection,
		"start_y": start, "start_x": range.startOffset,
		"end_y": end, "end_x": range.endOffset,
	}
}


/**
 * Set cursor position
 */
void setCursorPos(int x, int y)
{
	log(y + 1, x + 1);
	
	var line = this.getLineElement(y);
	var node = line.childNodes.item(0);
	var range = document.createRange();
	range.selectNode(node);
	range.setStart(node, x);
	range.setEnd(node, x);
	
	return range;
}


/**
 * Returns line
 */
var findLine(var node)
{
	while (node and (node.nodeType == 3 or not(node.classList.contains("line"))))
	{
		node = node.parentElement;
	}
	return node ? node.line : null;
}


/**
 * Returns line element
 */
var getLineElement(int pos) => this.getRef("text").childNodes.item(pos);


/**
 * Returns textarea props
 */
Map getProps()
{
	if (this.readonly) return {
		"readonly": true,
	};
	return {};
}


/**
 * Mounted event
 */
void onMounted()
{
	this.setValue(this.value);
	document.addEventListener("mouseup", this.onSelectEnd);
}


/**
 * Unmounted
 */
void onUnmount()
{
	document.removeEventListener("mouseup", this.onSelectEnd);
}


/**
 * Updated event
 */
void onUpdated()
{
	this.reference.setValue(this);
	if (this.old_value == this.value) return;
	this.setValue(this.value);
}


/**
 * Select
 */
void onSelectStart()
{
	this.select_started = true;
}


/**
 * Select end
 */
void onSelectEnd()
{
	if (not this.select_started) return;
	this.selected = this.getCursorPos();
}


/**
 * Key down event
 */
void onKeyDown(var e)
{
	if (e.key == "Tab")
	{
		e.preventDefault();
		e.stopPropagation();
		
		var sel = this.getRef("text").ownerDocument.defaultView.getSelection();
		log(sel);
	}
}


/**
 * Input event
 */
void onInput(var e)
{
	if (e.inputType == "deleteContentBackward")
	{
		int start_y = this.selected.get("start_y");
		int start_x = this.selected.get("start_x");
		int end_y = this.selected.get("start_y");
		int end_x = this.selected.get("end_x");
		if (start_y != end_y)
		{
		}
		
		this.lines.get(start_y).set()
		
		
		string content = this.getValue();
		log(this.selected);
		log(content);
		this.setValue(content);
		/*this.setCursorPos(cursor.get("end_x"), cursor.get("end_y"));*/
	}
	else if (e.inputType == "insertFromPaste")
	{
		Dict cursor = this.getCursorPos();
		log(cursor);
		
		
		/*
		var range = cursor.get("range");
		string inserted_text = this.getLineElement(cursor.get("end")).textContent;
		int inserted_count_lines = rs::split("\n", inserted_text).count() - 1;
		int x = cursor.get("x");
		int y = cursor.get("y") + inserted_count_lines;
		string content = this.getValue();
		log(content);
		this.setValue(content);
		this.nextTick(void() use (x, y){ this.setCursorPos(x, y); });*/
	}
	
	return;
	if (this.change_timer != null)
	{
		window.clearTimeout(this.change_timer);
		this.change_timer = null;
	}
	this.change_timer = window.setTimeout(void (){ this.onChange(); }, this.timeout);
}


/**
 * Change event
 */
void onChange(var e)
{
	string value = this.getValue();
	
	/* Send value change */
	this.emit("valueChange", new ValueChangeMessage{
		"value": value,
		"old_value": this.old_value,
		"data": this.data,
	});
	
	/* Set old value */
	this.old_value = value;
	this.change_timer = null;
}


</script>

</class>